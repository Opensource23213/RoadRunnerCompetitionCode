package org.firstinspires.ftc.teamcode.drive.opmode;

import static org.apache.commons.math3.util.FastMath.abs;

import com.acmerobotics.dashboard.FtcDashboard;
import com.acmerobotics.dashboard.telemetry.MultipleTelemetry;
import com.arcrobotics.ftclib.controller.PIDController;
import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.AnalogInput;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.IMU;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AngularVelocity;
import org.firstinspires.ftc.robotcore.external.navigation.YawPitchRollAngles;

/*
  This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
  the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
  of the FTC Driver Station. When a selection is made from the menu, the corresponding OpMode
  class is instantiated on the Robot Controller and executed.

  This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
  It includes all the skeletal structure that all linear OpModes contain.

  Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
  Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */

@TeleOp(name="Swerve", group="ABC Opmode")
//@Disabled
public class Swerves extends LinearOpMode {
    private PIDController controller;

    public static double p = 0.003, i = 0, d = 0;

    public static double f = 0.01;

    public static int target = 0;

    // Declare OpMode members.
    IMU imu;
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor front_left = null;
    private DcMotor front_right = null;
    private DcMotor rear_left = null;
    private DcMotor rear_right = null; //also has encoder for vertical deadwheel

    private CRServo frserv = null;

    private CRServo flserv = null;
    private CRServo rrserv = null;

    private CRServo rlserv = null;
    AnalogInput frpose;
    AnalogInput flpose;
    AnalogInput rrpose;
    AnalogInput rlpose;


    @Override
    public void runOpMode() {

        // Hardware Maps
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        imu = hardwareMap.get(IMU.class, "imu");

        // Motors
        //red1 = hardwareMap.get(DigitalChannel.class, "red1");
        //red2 = hardwareMap.get(DigitalChannel.class, "red2");
        //green1 = hardwareMap.get(DigitalChannel.class, "green1");
        //green2 = hardwareMap.get(DigitalChannel.class, "green2");
        //front_left = hardwareMap.get(DcMotor.class, "front_left");
        front_right = hardwareMap.get(DcMotor.class, "front_right");
        //rear_left = hardwareMap.get(DcMotor.class, "rear_left");
        //rear_right = hardwareMap.get(DcMotor.class, "rear_right");
        frserv = hardwareMap.get(CRServo.class, "frserv");
        //rrserv = hardwareMap.get(CRServo.class, "rrserv");
        //flserv = hardwareMap.get(CRServo.class, "flserv");
        //rlserv = hardwareMap.get(CRServo.class, "rlserv");
        frpose = hardwareMap.get(AnalogInput.class, "frpose");
        controller = new PIDController(p, i, d);
        telemetry = new MultipleTelemetry(telemetry, FtcDashboard.getInstance().getTelemetry());
        RevHubOrientationOnRobot.LogoFacingDirection logoDirection = RevHubOrientationOnRobot.LogoFacingDirection.RIGHT;
        RevHubOrientationOnRobot.UsbFacingDirection usbDirection = RevHubOrientationOnRobot.UsbFacingDirection.UP;
        RevHubOrientationOnRobot orientationOnRobot = new RevHubOrientationOnRobot(logoDirection, usbDirection);
        // Initialize the IMU with this mounting orientation
        imu.initialize(new IMU.Parameters(orientationOnRobot));
        double lasty = 1;
        double lastx = 0;
        double speedmult = 1;
        double speedleft = 0;
        double speedright = 0;
        waitForStart();
        while (opModeIsActive()) {
            YawPitchRollAngles orientation = imu.getRobotYawPitchRollAngles();
            AngularVelocity angularVelocity = imu.getRobotAngularVelocity(AngleUnit.DEGREES);
            double Frpose = frpose.getVoltage() / 3.3 * 360 + orientation.getYaw(AngleUnit.DEGREES);
            if (Frpose > 360) {
                Frpose -= 360;
            }

            double y = gamepad1.left_stick_y;
            if (abs(lasty - gamepad1.left_stick_y) >= 1.5) {
                speedmult *= -1;
                y *= -1;
            }
            lasty = y;
            double x = gamepad1.left_stick_x;
            if (abs(lastx - gamepad1.left_stick_x) >= 1.5) {
                speedmult *= -1;
                x *= -1;
            }
            lastx = x;
            double desired = abs(((lastx * -1 * 180) + 180) - ((lasty * 90) + 90));
            if (Frpose > 225 && desired < 135 && Frpose - desired >= 225){
                desired += 360;
            }
            if(desired > 225 && Frpose < 135 && desired - Frpose >= 225){
                desired -= 360;
            }


            controller.setPID(p, i, d);
            double pid = controller.calculate(Frpose, desired);
            double ff = Math.cos(Math.toRadians(desired)) * f;
            double power = pid + ff;
            frserv.setPower(power);
            //rrserv.setPower(power);
            //flserv.setPower(power);
            //rlserv.setPower(power);
            if (abs(gamepad1.left_stick_x) > .3 || abs(gamepad1.left_stick_y) > .3){
                speedleft = speedmult;
                speedright = speedmult;
            }
            if(abs(gamepad1.right_stick_x) > .1){
                speedleft += gamepad1.right_stick_x * 2;
                speedright += gamepad1.right_stick_x * -2;
            }
            //front_left.setPower(speedleft);
            front_right.setPower(speedright);
            //rear_left.setPower(speedleft);
            //rear_right.setPower(speedright);
        }
    }

}


